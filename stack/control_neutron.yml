# neutron
---
  # install

  - name: install neutron
    apt:
      package: "{{ item }}"
      state: latest
    become: yes
    with_items:
    - neutron-server 
    - neutron-plugin-ml2 
    - neutron-linuxbridge-agent
    - neutron-dhcp-agent 
    - neutron-metadata-agent

  - name: create the database
    shell: |
      mysql -h {{ master_ip }} -u root -p --password='{{ root_dbpass }}' -e "\
      CREATE DATABASE neutron;\
      GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost'\
        IDENTIFIED BY '{{ neutron_dbpass }}';\
      GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%'\
        IDENTIFIED BY '{{ neutron_dbpass }}';"

  - name: create the neutron user
    shell: |
      source admin-openrc
      openstack user create --domain default --password {{ neutron_pass }} neutron
      openstack role add --project service --user neutron admin

      # Create the neutron service entity:
      openstack service create --name neutron --description "OpenStack Networking" network

      # Create the Networking service API endpoints:
      openstack endpoint create --region RegionOne network public http://{{ master_ip }}:9696
      openstack endpoint create --region RegionOne network internal http://{{ master_ip }}:9696
      openstack endpoint create --region RegionOne network admin http://{{ master_ip }}:9696
    args: 
      executable: /bin/bash

  # options
  # 1) provider 
  #    - no private networks, routers, or floating IP
  #      only admin or other privileged users can manage provider networks 
  # 2) self-service (private)
  #    - adds layer-3 services to option 1 so can attach instances
  #      to self-service networks.  demo or other unprivileged uses can 
  #      manage self-service networkings, including routers.  floating
  #      ip provide connectivity to external networks like the internet.
  #    - Self service networks typically use overlay networks like vxlan 
  #      so require a new MTU number be set for instances

  # option 1: provider networks begin
  # ===============================================
  # Configure the server component
  # The Networking server component configuration includes the 
  # database, authentication mechanism, message queue, topology 
  # change notifications, and plug-in.
  # - configure database access:
  # - enable the Modular Layer 2 (ML2) plug-in and disable additional plug-ins:
  # - configure RabbitMQ message queue access:
  # - configure Identity service access:
  # - configure Networking to notify Compute of network topology changes:

  - name: neutron.conf
    blockinfile:
      dest: /etc/neutron/neutron.conf
      marker: '# control_neutron_marker'
      block: |
        [database]
        connection = mysql+pymysql://neutron:{{ neutron_dbpass }}@{{ master_ip }}/neutron

        [DEFAULT]
        core_plugin = ml2
        service_plugins =

        [DEFAULT]
        rpc_backend = rabbit

        [oslo_messaging_rabbit]
        rabbit_host = {{ master_ip }}
        rabbit_userid = openstack
        rabbit_password = {{ rabbit_pass }}

        [DEFAULT]
        auth_strategy = keystone

        [keystone_authtoken]
        auth_uri = http://{{ master_ip }}:5000
        auth_url = http://{{ master_ip }}:35357
        memcached_servers = {{ master_ip }}:11211
        auth_type = password
        project_domain_name = default
        user_domain_name = default
        project_name = service
        username = neutron
        password = {{ neutron_pass }}

        [DEFAULT]
        notify_nova_on_port_status_changes = True
        notify_nova_on_port_data_changes = True

        [nova]
        auth_url = http://{{ master_ip }}:35357
        auth_type = password
        project_domain_name = default
        user_domain_name = default
        region_name = RegionOne
        project_name = service
        username = nova
        password = {{ nova_pass }}
    become: yes

  # Configure the Modular Layer 2 (ML2) plug-in
  # The ML2 plug-in uses the Linux bridge mechanism to 
  # build layer-2 (bridging and switching) virtual networking 
  # infrastructure for instances.

  # - enable flat and VLAN networks
  # - disable self-service networks:
  # - enable the Linux bridge mechanism:
  # - enable the port security extension driver:
  # - configure the provider virtual network as a flat network:
  # - enable ipset to increase efficiency of security group rules:

  - name: ml2_conf.ini
    blockinfile:
      marker: '# control_neutron_marker'
      dest: /etc/neutron/plugins/ml2/ml2_conf.ini
      block: |
        [ml2]
        type_drivers = flat,vlan
        tenant_network_types =
        mechanism_drivers = linuxbridge
        extension_drivers = port_security
        [ml2_type_flat]
        flat_networks = provider
        [securitygroup]
        enable_ipset = True
    become: yes

  # Configure the Linux bridge agent
  # The Linux bridge agent builds layer-2 (bridging and switching) 
  # virtual networking infrastructure for instances and handles 
  # security groups.
  # - map the provider virtual network to the provider physical network interface
  # - disable VXLAN overlay networks:
  # - enable security groups and configure the Linux bridge iptables firewall driver

  - name: linuxbridge_agent.ini
    blockinfile:
      marker: '# control_neutron_marker'
      dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
      block: |
        [linux_bridge]
        physical_interface_mappings = provider:{{ provider_if }}
        [vxlan]
        enable_vxlan = False
        [securitygroup]
        enable_security_group = True
        firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
    become: yes

  # Configure the DHCP agent
  # The DHCP agent provides DHCP services for virtual networks.
  # - configure the Linux bridge interface driver, Dnsmasq DHCP driver, 
  #   and enable isolated metadata so instances on provider networks 
  #   can access metadata over the network:

  - name: dhcp_agent.ini
    blockinfile:
      marker: '# control_neutron_marker'
      dest: /etc/neutron/dhcp_agent.ini
      block: |
        [DEFAULT]
        interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
        dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
        enable_isolated_metadata = True
    become: yes

  # option 1: provider networks end
  # ===============================================
  # configure the metadata agent
  # The metadata agent provides configuration information 
  # such as credentials to instances.
  # - configure the metadata host and shared secret:

  - name: metadata_agent.ini
    blockinfile:
      marker: '# control_neutron_marker'
      dest: /etc/neutron/metadata_agent.ini
      block: |
        [DEFAULT]
        nova_metadata_ip = {{ master_ip }}
        metadata_proxy_shared_secret = {{ metadata_secret }}
    become: yes

# Configure Compute to use Networking

# - configure access parameters, enable the metadata proxy, 
#   and configure the secret:

  - name: nova.conf
    blockinfile:
      dest: /etc/nova/nova.conf
      marker: '# control_neutron_marker'
      block: |
        [neutron]
        url = http://{{ master_ip }}:9696
        auth_url = http://{{ master_ip }}:35357
        auth_type = password
        project_domain_name = default
        user_domain_name = default
        region_name = RegionOne
        project_name = service
        username = neutron
        password =  {{ neutron_pass }}
        service_metadata_proxy = True
        metadata_proxy_shared_secret = {{ metadata_secret }}
    become: yes

  # Populate the database:
  # Database population occurs later for Networking 
  # because the script requires complete server and 
  # plug-in configuration files.

  - name: populate the database
    shell: |
      sudo -u neutron neutron-db-manage \
        --config-file /etc/neutron/neutron.conf \
        --config-file /etc/neutron/plugins/ml2/ml2_conf.ini \
         upgrade head

  - name: restart the Compute API service
    shell: service nova-api restart
    become: yes

  # restart the Networking services (for option 1 and 2)

  - name: restart neutron-server
    shell: service neutron-server restart
    become: yes
  - name: restart neutron-linuxbridge-agent
    shell: service neutron-linuxbridge-agent restart
    become: yes
  - name: restart neutron-dhcp-agent
    shell: service neutron-dhcp-agent restart
    become: yes
  - name: restart neutron-metadata-agent
    shell: service neutron-metadata-agent restart
    become: yes

